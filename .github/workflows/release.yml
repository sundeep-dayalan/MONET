name: Release MONET API

# This workflow triggers when you push a new tag (e.g., v1.0.0, v1.2.3)
on:
  push:
    tags: ['v*']

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9 # Specify your pnpm version
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install root dependencies
        run: pnpm install

      - name: Build all packages (client and core)
        run: pnpm build

      - name: Create API deployment package
        run: |
          # 1. Create a clean staging directory for the zip contents
          mkdir -p staging

          # 2. Copy compiled backend code from its 'dist' folder to the staging root
          echo "Copying compiled backend files..."
          cp -r packages/core/dist/* staging/
          
          # 3. Copy the backend's package.json for installing prod dependencies
          cp packages/core/package.json staging/
          cp packages/core/package-lock.json staging/ # Important for consistent installs
          
          # 4. Move into the staging directory to prepare for packaging
          cd staging

          # 5. Install ONLY production dependencies for the backend
          echo "Installing production dependencies..."
          npm install --production

          # 6. Create the host.json file required by Azure Functions
          echo "Creating host.json..."
          cat > host.json << 'EOF'
          {
            "version": "2.0",
            "logging": {
              "applicationInsights": {
                "samplingSettings": {
                  "isEnabled": true,
                  "excludedTypes": "Request"
                }
              }
            },
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[4.*, 5.0.0)"
            }
          }
          EOF

          # 7. Create the function's directory and its function.json binding file
          echo "Creating function configuration..."
          mkdir -p app
          cat > app/function.json << 'EOF'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": ["get", "post", "put", "delete", "patch", "options"],
                "route": "{*segments}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ],
            "scriptFile": "../function-wrapper.js"
          }
          EOF

          # 8. Go back to the root and zip the contents of the staging directory
          cd ..
          echo "Zipping deployment package..."
          zip -r monet-api.zip staging/* staging/.??*
          
      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: monet-api.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}