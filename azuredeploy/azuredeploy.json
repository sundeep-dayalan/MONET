{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.51592",
      "templateHash": "12345678901234567890"
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "fn-node-ts-gh",
      "metadata": {
        "description": "The base name for all resources. A unique string will be appended to this."
      }
    },
    "deployId": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmmss')]",
      "metadata": {
        "description": "Auto-generated unique value to ensure new resource names on each deployment."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources."
      }
    },
    "repoURL": {
      "type": "string",
      "defaultValue": "https://github.com/sundeep-dayalan/MONET.git",
      "metadata": {
        "description": "The URL of the GitHub repository to deploy."
      }
    },
    "branch": {
      "type": "string",
      "defaultValue": "dummy",
      "metadata": {
        "description": "The branch of the repository to deploy."
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[uniqueString(resourceGroup().id, parameters('deployId'))]",
    "functionAppName": "[format('{0}-{1}', parameters('appName'), variables('uniqueSuffix'))]",
    "storageAccountName": "[format('st{0}', replace(variables('uniqueSuffix'), '-', ''))]",
    "hostingPlanName": "[format('{0}-plan-{1}', parameters('appName'), variables('uniqueSuffix'))]",
    "appInsightsName": "[format('appi-{0}', variables('uniqueSuffix'))]",
    "scriptIdentityName": "[format('dsid-{0}', variables('uniqueSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('scriptIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https,AccountName={0},AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~18"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            {
              "name": "NPM_CONFIG_PRODUCTION",
              "value": "false"
            },
            {
              "name": "WEBSITE_PROJECT_PATH",
              "value": "src"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            }
          ],
          "ftpsState": "FtpsOnly"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "zipDeployFromGitHub",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('scriptIdentityName'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('scriptIdentityName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "azPowerShellVersion": "7.2",
        "timeout": "PT30M",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnSuccess",
        "forceUpdateTag": "[parameters('deployId')]",
        "environmentVariables": [
          {
            "name": "KUDU_USER",
            "value": "[list(resourceId('Microsoft.Web/sites/config', variables('functionAppName'), 'publishingcredentials'), '2022-09-01').properties.publishingUserName]"
          },
          {
            "name": "KUDU_PASS",
            "secureValue": "[list(resourceId('Microsoft.Web/sites/config', variables('functionAppName'), 'publishingcredentials'), '2022-09-01').properties.publishingPassword]"
          },
          {
            "name": "KUDU_ZIPDEPLOY",
            "value": "[format('https://{0}.scm.azurewebsites.net/api/zipdeploy', variables('functionAppName'))]"
          },
          {
            "name": "REPO_ZIP_URL",
            "value": "[format('{0}/archive/refs/heads/{1}.zip', replace(parameters('repoURL'), '.git', ''), parameters('branch'))]"
          }
        ],
        "scriptContent": "[function.zipdeploy_script()]"
      }
    }
  ],
  "functions": [
    {
      "namespace": "function",
      "members": {
        "zipdeploy_script": {
          "parameters": [],
          "output": {
            "value": "\n$ErrorActionPreference = 'Stop'\n$ProgressPreference = 'SilentlyContinue'\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nfunction ThrowIfEmpty([string]$val, [string]$name){ if([string]::IsNullOrWhiteSpace($val)){ throw \"Missing required env var: $name\" } }\nThrowIfEmpty $env:KUDU_USER 'KUDU_USER'\nThrowIfEmpty $env:KUDU_PASS 'KUDU_PASS'\nThrowIfEmpty $env:KUDU_ZIPDEPLOY 'KUDU_ZIPDEPLOY'\nThrowIfEmpty $env:REPO_ZIP_URL 'REPO_ZIP_URL'\n$TempDir = [System.IO.Path]::GetTempPath()\n$repoZip = Join-Path $TempDir 'repo.zip'\n$extract = Join-Path $TempDir 'repo'\n$appZip = Join-Path $TempDir 'app.zip'\ntry {\n  Write-Host \"Downloading $env:REPO_ZIP_URL ...\"\n  Invoke-WebRequest -Uri $env:REPO_ZIP_URL -OutFile $repoZip -ErrorAction Stop\n  if(Test-Path $extract){ Remove-Item $extract -Recurse -Force }\n  New-Item -ItemType Directory -Path $extract | Out-Null\n  Expand-Archive -Path $repoZip -DestinationPath $extract -Force\n  $root = (Get-ChildItem -Path $extract | Where-Object { $_.PSIsContainer } | Select-Object -First 1).FullName\n  if([string]::IsNullOrWhiteSpace($root)){ throw 'Could not determine archive root folder' }\n  $srcPath = Join-Path $root 'src'\n  if(!(Test-Path $srcPath)){ throw \"src folder not found in repository archive at: $srcPath\" }\n  if(Test-Path $appZip){ Remove-Item $appZip -Force }\n  Write-Host 'Zipping src contents...'\n  Compress-Archive -Path (Join-Path $srcPath '*') -DestinationPath $appZip -Force\n  $creds = \"$env:KUDU_USER:$env:KUDU_PASS\"\n  $bytes = [System.Text.Encoding]::ASCII.GetBytes($creds)\n  $auth = [Convert]::ToBase64String($bytes)\n  $headers = @{ Authorization = \"Basic $auth\" }\n  Write-Host \"Uploading to $env:KUDU_ZIPDEPLOY ...\"\n  $resp = Invoke-WebRequest -Uri $env:KUDU_ZIPDEPLOY -Method POST -InFile $appZip -ContentType 'application/zip' -Headers $headers -ErrorAction Stop\n  Write-Host 'ZipDeploy queued. Polling deployment status...'\n  $statusUri = ($env:KUDU_ZIPDEPLOY -replace '/api/zipdeploy$', '/api/deployments/latest')\n  $max = 120\n  $delaySec = 5\n  $d = $null\n  function GetStatusText($dep){ if($dep.statusText){ return $dep.statusText } elseif($dep.status_text){ return $dep.status_text } else { return '' } }\n  function IsSucceeded($dep){ if(-not $dep){ return $false } if($dep.status -is [int]){ if($dep.status -eq 4){ return $true } } $txt = GetStatusText $dep; if($txt){ return ($txt.ToLower() -eq 'success') } return $false }\n  function IsInProgress($dep){ if(-not $dep){ return $true } if($dep.status -is [int]){ return ($dep.status -lt 3) } $t = (GetStatusText $dep).ToLower(); if($t){ return ($t -in @('running','building','pending','deploying')) } if($dep.complete -ne $true){ return $true } return $false }\n  for($i=0; $i -lt $max; $i++){\n    try {\n      $d = Invoke-RestMethod -Uri $statusUri -Headers $headers -ErrorAction Stop\n      $txt = GetStatusText $d\n      Write-Host (\"status: $($d.status) - $txt\")\n      if(-not (IsInProgress $d)){ break }\n    } catch {\n      Write-Host \"Waiting... ($i)\"\n    }\n    Start-Sleep -Seconds $delaySec\n  }\n  if(-not (IsSucceeded $d)){\n    $txt = GetStatusText $d\n    Write-Host \"Deployment not successful. Attempting to fetch Kudu logs...\"\n    try {\n      $logUri = ($statusUri + '/log')\n      $logs = Invoke-RestMethod -Uri $logUri -Headers $headers -ErrorAction Stop\n      if($logs){ $logs | ForEach-Object { Write-Host (\"[KUDU] $($_.log_time) $($_.message)\") } }\n    } catch { Write-Host 'Failed to fetch Kudu logs.' }\n    $msg = if($d){ \"Kudu deployment failed: status=$($d.status) message=$txt\" } else { 'Kudu deployment status unavailable' }\n    throw $msg\n  }\n  Write-Host 'ZipDeploy complete and successful.'\n} catch {\n  Write-Host 'ERROR: Deployment script failed.'\n  Write-Host $_.Exception.Message\n  if($_.Exception.Response){\n    $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())\n    $body = $reader.ReadToEnd()\n    Write-Host \"Response body: $body\"\n  }\n  throw\n}\n"
          }
        }
      }
    }
  ],
  "outputs": {
    "functionAppHostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName]"
    },
    "helloUrl": {
      "type": "string",
      "value": "[format('https://{0}/api/hello?name=MONET', reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName)]"
    }
  }
}
