{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "monet",
      "metadata": {
        "description": "Base name for the application"
      }
    },
    "releaseVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Used to force the deployment script to re-run when the template changes."
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[uniqueString(resourceGroup().id)]",
    "functionAppName": "[concat(parameters('appName'), '-app-', variables('uniqueSuffix'))]",
    "storageAccountName": "[concat('storage', uniqueString(resourceGroup().id))]",
    "hostingPlanName": "[concat(parameters('appName'), '-plan-', variables('uniqueSuffix'))]",
    "managedIdentityName": "[concat(parameters('appName'), '-deploy-id-', variables('uniqueSuffix'))]",
    "staticWebAppName": "[concat(parameters('appName'), '-swa-', variables('uniqueSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('managedIdentityName')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": { "name": "Standard_LRS" },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "kind": "linux",
      "properties": { "reserved": true },
      "sku": { "name": "Y1", "tier": "Dynamic" }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "ftpsState": "Disabled",
          "linuxFxVersion": "Python|3.11",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            { "name": "FUNCTIONS_EXTENSION_VERSION", "value": "~4" },
            { "name": "FUNCTIONS_WORKER_RUNTIME", "value": "python" },
            { "name": "FUNCTIONS_WORKER_RUNTIME_VERSION", "value": "3.11" },
            { "name": "WEBSITE_RUN_FROM_PACKAGE", "value": "1" },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
            },
            { "name": "WEBSITE_CONTENTSHARE", "value": "[variables('functionAppName')]" },
            { "name": "WEBSITE_ENABLE_SYNC_UPDATE_SITE", "value": "true" },
            { "name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "false" }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Web/sites/extensions",
      "apiVersion": "2019-08-01",
      "name": "[concat(variables('functionAppName'), '/zipdeploy')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "properties": {
        "packageUri": "[if(equals(parameters('releaseVersion'), 'latest'), 'https://github.com/sundeep-dayalan/MONET/releases/latest/download/monet-api.zip', concat('https://github.com/sundeep-dayalan/MONET/releases/download/', parameters('releaseVersion'), '/monet-api.zip'))]"
      }
    },
    {
      "type": "Microsoft.Web/staticSites",
      "apiVersion": "2022-03-01",
      "name": "[variables('staticWebAppName')]",
      "location": "Central US",
      "sku": { "name": "Free", "tier": "Free" },
      "properties": {
        "stagingEnvironmentPolicy": "Disabled",
        "allowConfigFileUpdates": true
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('staticWebAppName'), 'Contributor')]",
      "scope": "[resourceId('Microsoft.Web/staticSites', variables('staticWebAppName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]",
        "[resourceId('Microsoft.Web/staticSites', variables('staticWebAppName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "deployClientApp",
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('managedIdentityName'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/staticSites', variables('staticWebAppName'))]",
        "[extensionResourceId(resourceId('Microsoft.Web/staticSites', variables('staticWebAppName')), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, variables('staticWebAppName'), 'Contributor'))]"
      ],
      "properties": {
        "azCliVersion": "2.50.0",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnSuccess",
        "timeout": "PT30M",
  "forceUpdateTag": "[parameters('forceUpdateTag')]",
        "environmentVariables": [
          {
            "name": "STATIC_WEB_APP_NAME",
            "value": "[variables('staticWebAppName')]"
          },
          {
            "name": "RESOURCE_GROUP_NAME",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "PACKAGE_URL",
            "value": "[if(equals(parameters('releaseVersion'), 'latest'), 'https://github.com/sundeep-dayalan/MONET/releases/latest/download/monet-client.zip', concat('https://github.com/sundeep-dayalan/MONET/releases/download/', parameters('releaseVersion'), '/monet-client.zip'))]"
          }
    ],
  "scriptContent": "#!/bin/bash\nset -euo pipefail\ntrap 'echo \"Error on line $LINENO: exit code $?\" >&2; exit 1' ERR\n\necho 'Starting Static Web App client deployment...'\necho \"Package URL: $PACKAGE_URL\"\necho \"Static Web App: $STATIC_WEB_APP_NAME\"\n\necho 'Ensuring Azure CLI staticwebapp extension (preview)...'\naz extension add -n staticwebapp -y || az extension update -n staticwebapp\n\necho 'Downloading client package...'\ncurl -fL \"$PACKAGE_URL\" -o monet-client.zip\necho \"Downloaded: $(ls -lh monet-client.zip | awk '{print $5}')\"\n\necho 'Extracting package using Python (no unzip dependency)...'\nrm -rf ./client\npython3 - << 'PY'\nimport zipfile, sys\nwith zipfile.ZipFile('monet-client.zip') as z:\n  z.extractall('client')\nprint('Extraction completed.')\nPY\n\n# Detect app directory containing index.html (portable across find variants)\nif [ -f ./client/index.html ]; then\n  APP_DIR=./client\nelse\n  APP_DIR=$(find ./client -type f -name index.html 2>/dev/null | head -n 1 | xargs -I{} dirname {} || true)\nfi\nif [ -z \"$APP_DIR\" ]; then\n  echo 'Could not locate index.html in the package. Listing contents:'\n  find ./client -type f 2>/dev/null | sed 's/^/ - /' || true\n  exit 1\nfi\necho \"Detected app directory: $APP_DIR\"\n\n# Ensure SPA fallback config exists (if not provided in artifact)\nif [ ! -f \"$APP_DIR/staticwebapp.config.json\" ]; then\n  cat > \"$APP_DIR/staticwebapp.config.json\" << 'EOF'\n{\n  \"navigationFallback\": {\n    \"rewrite\": \"/index.html\",\n    \"exclude\": [\"/assets/*\", \"/static/*\", \"/*.css\", \"/*.js\", \"/*.png\", \"/*.jpg\", \"/*.svg\"]\n  }\n}\nEOF\nfi\n\n# Ensure Node.js is available for SWA CLI\necho 'Ensuring Node.js is available for SWA CLI...'\nif ! command -v node >/dev/null 2>&1; then\n  echo 'Node.js not found. Attempting install via package manager or tarball fallback...'\n  if command -v apk >/dev/null 2>&1; then\n    apk add --no-cache nodejs npm ca-certificates\n    update-ca-certificates || true\n  elif command -v apt-get >/dev/null 2>&1; then\n    apt-get update -y\n    apt-get install -y nodejs npm ca-certificates xz-utils\n  elif command -v yum >/dev/null 2>&1; then\n    yum install -y nodejs npm ca-certificates xz || true\n  else\n    echo 'No known package manager. Installing Node.js from tarball...'\n    ARCH=$(uname -m)\n    case \"$ARCH\" in\n      x86_64) NODE_ARCH=\"x64\";;\n      aarch64|arm64) NODE_ARCH=\"arm64\";;\n      *) NODE_ARCH=\"x64\";;\n    esac\n    NODE_VERSION=\"v18.20.4\"\n    curl -fsSL \"https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz\" -o node.tar.xz\n    tar -xJf node.tar.xz -C /usr/local --strip-components=1\n    rm -f node.tar.xz\n    ln -sf /usr/local/bin/node /usr/bin/node || true\n    ln -sf /usr/local/bin/npm /usr/bin/npm || true\n  fi\nfi\nnode -v && npm -v\n\n# Acquire short-lived deployment token via Azure CLI (using managed identity)\necho 'Acquiring SWA deployment token via Azure CLI...'\nTOKEN=$(az staticwebapp secrets list --name \"$STATIC_WEB_APP_NAME\" --resource-group \"$RESOURCE_GROUP_NAME\" --query 'properties.apiKey' -o tsv)\nif [ -z \"$TOKEN\" ]; then\n  echo 'Failed to acquire SWA deployment token.' >&2\n  exit 1\nfi\n\necho 'Deploying to Azure Static Web Apps (production) using SWA CLI...'\nexport SWA_CLI_DEPLOYMENT_TOKEN=\"$TOKEN\"\nnpx --yes @azure/static-web-apps-cli@2 deploy \"$APP_DIR\" --env production --app-name \"$STATIC_WEB_APP_NAME\" --resource-group \"$RESOURCE_GROUP_NAME\"\n\necho 'Client deployment completed successfully!'"
      }
    }
  ],
  "outputs": {
    "backendApiUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2022-09-01').defaultHostName)]"
    },
    "frontendWebUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/staticSites', variables('staticWebAppName')), '2022-03-01').defaultHostname)]"
    }
  }
}